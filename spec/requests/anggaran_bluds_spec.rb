require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/anggaran_bluds", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # AnggaranBlud. As you add validations to AnggaranBlud, be sure to
  # adjust the attributes here as well.
  before(:each) do
    sign_in user
  end
  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      kode_barang: 'kode_01',
      kode_kelompok_barang: 'kode_01_01',
      uraian_barang: 'test blud 1',
      harga_satuan: '200_000_000'
    }
  end

  let(:invalid_attributes) do
    {
      kode_barang: 'kode_01',
      uraian_barang: 'test blud 1',
      harga_satuan: 'xyz'
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      AnggaranBlud.create! valid_attributes
      get anggaran_bluds_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      anggaran_blud = AnggaranBlud.create! valid_attributes
      get anggaran_blud_url(anggaran_blud)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_anggaran_blud_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      anggaran_blud = AnggaranBlud.create! valid_attributes
      get edit_anggaran_blud_url(anggaran_blud)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new AnggaranBlud" do
        expect do
          post anggaran_bluds_url, params: { anggaran_blud: valid_attributes }
        end.to change(AnggaranBlud, :count).by(1)
      end

      it "redirects to the created anggaran_blud" do
        post anggaran_bluds_url, params: { anggaran_blud: valid_attributes }
        expect(response).to redirect_to(anggaran_bluds_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new AnggaranBlud" do
        expect do
          post anggaran_bluds_url, params: { anggaran_blud: invalid_attributes }
        end.to change(AnggaranBlud, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post anggaran_bluds_url, params: { anggaran_blud: invalid_attributes }
        expect(response).to render_template(:new)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          kode_barang: 'kode_01',
          kode_kelompok_barang: 'kode_01_01_01',
          uraian_barang: 'test blud 1',
          harga_satuan: '200_000_000'
        }
      end

      it "redirects to the anggaran_blud" do
        anggaran_blud = AnggaranBlud.create! valid_attributes
        patch anggaran_blud_url(anggaran_blud), params: { anggaran_blud: new_attributes }
        anggaran_blud.reload
        expect(response).to redirect_to(anggaran_bluds_url)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        anggaran_blud = AnggaranBlud.create! valid_attributes
        patch anggaran_blud_url(anggaran_blud), params: { anggaran_blud: invalid_attributes }
        expect(response).to render_template(:edit)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested anggaran_blud" do
      anggaran_blud = AnggaranBlud.create! valid_attributes
      expect do
        delete anggaran_blud_url(anggaran_blud)
      end.to change(AnggaranBlud, :count).by(-1)
    end

    it "redirects to the anggaran_bluds list" do
      anggaran_blud = AnggaranBlud.create! valid_attributes
      delete anggaran_blud_url(anggaran_blud)
      expect(response).to redirect_to(anggaran_bluds_url)
    end
  end
end
