require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/data_dukungs", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # DataDukung. As you add validations to DataDukung, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }

  let(:isu_strategis) do
    create(:isu_strategis_opd,
           kode_opd: user.opd.kode_unik_opd)
  end
  let(:permasalahan_opd) do
    create(:permasalahan_opd,
           isu_strategis_opd: isu_strategis,
           kode_opd: user.opd.kode_unik_opd,
           tahun: '2024')
  end
  let(:valid_attributes) do
    {
      nama_data: 'Test Data',
      keterangan: 'test',
      data_dukungable_type: 'PermasalahanOpd',
      data_dukungable_id: permasalahan_opd.id
    }
  end

  let(:invalid_attributes) do
    {
      nama_data: '',
      keterangan: 'test'
    }
  end

  before(:each) do
    sign_in user
  end

  describe "GET /index" do
    it "renders a successful response" do
      DataDukung.create! valid_attributes
      get data_dukungs_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      data_dukung = DataDukung.create! valid_attributes
      get data_dukung_url(data_dukung)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_data_dukung_url(permasalahan_id: permasalahan_opd.id)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      data_dukung = DataDukung.create! valid_attributes
      get edit_data_dukung_url(data_dukung)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new DataDukung" do
        expect do
          post data_dukungs_url, params: { data_dukung: valid_attributes }
        end.to change(DataDukung, :count).by(1)
      end

      it "return json response with html" do
        post data_dukungs_url, params: { data_dukung: valid_attributes }
        json_response = JSON.parse(response.body).deep_symbolize_keys
        expect(json_response).to include(:html_content)
      end
    end

    context "with invalid parameters" do
      it "does not create a new DataDukung" do
        expect do
          post data_dukungs_url, params: { data_dukung: invalid_attributes }
        end.to change(DataDukung, :count).by(0)
      end

      it "renders a unsuccessful response" do
        post data_dukungs_url, params: { data_dukung: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          nama_data: 'ubah data'
        }
      end

      it "updates the requested data_dukung" do
        data_dukung = DataDukung.create! valid_attributes
        patch data_dukung_url(data_dukung), params: { data_dukung: new_attributes }
        data_dukung.reload
        expect(data_dukung.nama_data).to eq 'ubah data'
      end

      it "redirects to the data_dukung" do
        data_dukung = DataDukung.create! valid_attributes
        patch data_dukung_url(data_dukung), params: { data_dukung: new_attributes }
        data_dukung.reload
        expect(response).to redirect_to(data_dukung_url(data_dukung))
      end
    end

    context "with invalid parameters" do
      it "renders a unsuccessful response " do
        data_dukung = DataDukung.create! valid_attributes
        patch data_dukung_url(data_dukung), params: { data_dukung: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested data_dukung" do
      data_dukung = DataDukung.create! valid_attributes
      expect do
        delete data_dukung_url(data_dukung)
      end.to change(DataDukung, :count).by(-1)
    end

    it "redirects to the data_dukungs list" do
      data_dukung = DataDukung.create! valid_attributes
      delete data_dukung_url(data_dukung)
      expect(response).to redirect_to(data_dukungs_url)
    end
  end
end
