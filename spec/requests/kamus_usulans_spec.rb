require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/kamus_usulans", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # KamusUsulan. As you add validations to KamusUsulan, be sure to
  # adjust the attributes here as well.

  before(:each) { sign_in(user) }

  let(:opd) { create(:opd) }
  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      bidang_urusan: 'pemerintahan',
      id_kamus: 'xyz',
      id_program: 'abc',
      id_unit: opd.id_opd_skp,
      usulan: 'Contoh Usulan Musren'
    }
  end

  let(:invalid_attributes) do
    {
      bidang_urusan: 'pemerintahan',
      id_kamus: '',
      id_program: 'abc',
      id_unit: opd.id_opd_skp,
      usulan: 'Contoh Usulan Musren'
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      KamusUsulan.create! valid_attributes
      get kamus_usulans_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      kamus_usulan = KamusUsulan.create! valid_attributes
      get kamus_usulan_url(kamus_usulan)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_kamus_usulan_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      kamus_usulan = KamusUsulan.create! valid_attributes
      get edit_kamus_usulan_url(kamus_usulan)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new KamusUsulan" do
        expect do
          post kamus_usulans_url, params: { kamus_usulan: valid_attributes }
        end.to change(KamusUsulan, :count).by(1)
      end

      it "redirects to the created kamus_usulan" do
        post kamus_usulans_url, params: { kamus_usulan: valid_attributes }
        expect(response).to redirect_to(kamus_usulan_url(KamusUsulan.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new KamusUsulan" do
        expect do
          post kamus_usulans_url, params: { kamus_usulan: invalid_attributes }
        end.to change(KamusUsulan, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post kamus_usulans_url, params: { kamus_usulan: invalid_attributes }
        expect(response).to render_template(:new)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          bidang_urusan: 'perencanaan dan penelitian',
          id_kamus: 'xyz',
          id_program: 'abc',
          id_unit: opd.id_opd_skp,
          usulan: 'Contoh Usulan Musren'
        }
      end

      it "updates the requested kamus_usulan" do
        kamus_usulan = KamusUsulan.create! valid_attributes
        patch kamus_usulan_url(kamus_usulan), params: { kamus_usulan: new_attributes }
        kamus_usulan.reload
        expect(response).to redirect_to(kamus_usulan_url(kamus_usulan))
      end

      it "redirects to the kamus_usulan" do
        kamus_usulan = KamusUsulan.create! valid_attributes
        patch kamus_usulan_url(kamus_usulan), params: { kamus_usulan: new_attributes }
        kamus_usulan.reload
        expect(response).to redirect_to(kamus_usulan_url(kamus_usulan))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        kamus_usulan = KamusUsulan.create! valid_attributes
        patch kamus_usulan_url(kamus_usulan), params: { kamus_usulan: invalid_attributes }
        expect(response).to render_template(:edit)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested kamus_usulan" do
      kamus_usulan = KamusUsulan.create! valid_attributes
      expect do
        delete kamus_usulan_url(kamus_usulan)
      end.to change(KamusUsulan, :count).by(-1)
    end

    it "redirects to the kamus_usulans list" do
      kamus_usulan = KamusUsulan.create! valid_attributes
      delete kamus_usulan_url(kamus_usulan)
      expect(response).to redirect_to(kamus_usulans_url)
    end
  end
end
