require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/kemungkinans", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Kemungkinan. As you add validations to Kemungkinan, be sure to
  # adjust the attributes here as well.
  before(:each) { sign_in(user) }
  let(:user) { create(:user) }

  let(:valid_attributes) do
    {
      deskripsi: 'Contoh kemungkinan',
      keterangan: 'kemungkinan contoh',
      kode_skala: 'km_01',
      nilai: '1',
      tipe_nilai: 'xyz',
      type: 'Kemungkinan'
    }
  end

  let(:invalid_attributes) do
    {
      deskripsi: 'Contoh kemungkinan',
      keterangan: 'kemungkinan contoh',
      kode_skala: '',
      nilai: '1',
      tipe_nilai: 'xyz',
      type: 'Kemungkinan'
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      Kemungkinan.create! valid_attributes
      get kemungkinans_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      kemungkinan = Kemungkinan.create! valid_attributes
      get kemungkinan_url(kemungkinan)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_kemungkinan_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      kemungkinan = Kemungkinan.create! valid_attributes
      get edit_kemungkinan_url(kemungkinan)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Kemungkinan" do
        expect do
          post kemungkinans_url, params: { kemungkinan: valid_attributes }
        end.to change(Kemungkinan, :count).by(1)
      end

      it "redirects to the created kemungkinan" do
        post kemungkinans_url, params: { kemungkinan: valid_attributes }
        expect(response).to redirect_to(kemungkinan_url(Kemungkinan.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Kemungkinan" do
        expect do
          post kemungkinans_url, params: { kemungkinan: invalid_attributes }
        end.to change(Kemungkinan, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post kemungkinans_url, params: { kemungkinan: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        {
          deskripsi: 'Contoh kemungkinan edit',
          keterangan: 'kemungkinan contoh edit',
          kode_skala: 'km_02',
          nilai: '2',
          tipe_nilai: 'xyz',
          type: 'Kemungkinan'
        }
      end

      it "updates the requested kemungkinan" do
        kemungkinan = Kemungkinan.create! valid_attributes
        patch kemungkinan_url(kemungkinan), params: { kemungkinan: new_attributes }
        kemungkinan.reload
        expect(Kemungkinan.last.deskripsi).to eq(new_attributes[:deskripsi])
      end

      it "redirects to the kemungkinan" do
        kemungkinan = Kemungkinan.create! valid_attributes
        patch kemungkinan_url(kemungkinan), params: { kemungkinan: new_attributes }
        kemungkinan.reload
        expect(response).to redirect_to(kemungkinan_url(kemungkinan))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        kemungkinan = Kemungkinan.create! valid_attributes
        patch kemungkinan_url(kemungkinan), params: { kemungkinan: invalid_attributes }
        expect(response).to render_template(:edit)
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested kemungkinan" do
      kemungkinan = Kemungkinan.create! valid_attributes
      expect do
        delete kemungkinan_url(kemungkinan)
      end.to change(Kemungkinan, :count).by(-1)
    end

    it "redirects to the kemungkinans list" do
      kemungkinan = Kemungkinan.create! valid_attributes
      delete kemungkinan_url(kemungkinan)
      expect(response).to redirect_to(kemungkinans_url)
    end
  end
end
